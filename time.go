package yamltypes

import "time"

type Duration time.Duration

// Autogenerated go code is indistingushable from normal Go code :)

type ANSICTime time.Time
type UnixDateTime time.Time
type RubyDateTime time.Time
type RFC822Time time.Time
type RFC822ZTime time.Time
type RFC850Time time.Time
type RFC1123Time time.Time
type RFC1123ZTime time.Time
type RFC3339Time time.Time
type RFC3339NanoTime time.Time
type KitchenTime time.Time
type StampTime time.Time
type StampMilliTime time.Time
type StampMicroTime time.Time
type StampNanoTime time.Time

func (t *ANSICTime) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.ANSIC)
}

func (t *UnixDateTime) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.UnixDate)
}

func (t *RubyDateTime) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.RubyDate)
}

func (t *RFC822Time) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.RFC822)
}

func (t *RFC822ZTime) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.RFC822Z)
}

func (t *RFC850Time) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.RFC850)
}

func (t *RFC1123Time) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.RFC1123)
}

func (t *RFC1123ZTime) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.RFC1123Z)
}

func (t *RFC3339Time) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.RFC3339)
}

func (t *RFC3339NanoTime) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.RFC3339Nano)
}

func (t *KitchenTime) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.Kitchen)
}

func (t *StampTime) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.Stamp)
}

func (t *StampMilliTime) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.StampMilli)
}

func (t *StampMicroTime) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.StampMicro)
}

func (t *StampNanoTime) UnmarshalYAML(u func(interface{}) error) error {
	return unmarshalTimeAndValidate((*time.Time)(t), u, time.StampNano)
}

func (d *Duration) UnmarshalYAML(u func(interface{}) error) error {
	var s string
	if err := u(&s); err != nil {
		return err
	}

	pd, err := time.ParseDuration(s)
	if err != nil {
		return err
	}

	*d = Duration(pd)
	return nil
}
